{
  "address": "0x2c2Ce15ba0F20e053cac843D30687CF9EE097ad7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "BoughtTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "Invest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "TokenBurn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BUSD_Addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ICOState",
      "outputs": [
        {
          "internalType": "enum SYRFICO.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_Addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_Addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        }
      ],
      "name": "buyWithTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hardCap",
          "type": "uint256"
        }
      ],
      "name": "changeHardCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPrice",
          "type": "uint256"
        }
      ],
      "name": "changeTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endICO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getICOState",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getICOTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haltICO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hardCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "investedAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investor",
          "type": "address"
        }
      ],
      "name": "investorBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raisedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resumeICO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startICO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract WSYRF",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBNB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x04336e8a36f32a53875307ff819a25f8340c073b572ecd8380af1737c9385b48",
  "receipt": {
    "to": null,
    "from": "0xCeaF7B64e24991dF1f3b1A6Ba1096C896B5Ed73A",
    "contractAddress": "0x2c2Ce15ba0F20e053cac843D30687CF9EE097ad7",
    "transactionIndex": 0,
    "gasUsed": "1644784",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7ea3961353f96d8e28a087621475c1a377995606c2142c544476851e8374f2af",
    "transactionHash": "0x04336e8a36f32a53875307ff819a25f8340c073b572ecd8380af1737c9385b48",
    "logs": [],
    "blockNumber": 26220519,
    "cumulativeGasUsed": "1644784",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x558C304e163671B2e6278de7b0cE384A28441111"
  ],
  "numDeployments": 1,
  "solcInputHash": "42574cb3150d1c86229a641bc5e760aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokenBurn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BUSD_Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICOState\",\"outputs\":[{\"internalType\":\"enum SYRFICO.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"buyWithTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"changeHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getICOState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getICOTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haltICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"investorBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract WSYRF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SYRFICO.sol\":\"SYRFICO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SYRFICO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./WSYRF.sol\\\";\\r\\n\\r\\ninterface IBEP20 {\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract SYRFICO {\\r\\n    using SafeMath for uint256;\\r\\n    AggregatorV3Interface internal priceFeed;\\r\\n    //Administration Details\\r\\n    address public admin;\\r\\n\\r\\n    //Token\\r\\n    WSYRF public token;\\r\\n    IBEP20 BUSD;\\r\\n    IBEP20 USDT;\\r\\n    IBEP20 USDC;\\r\\n    address public BUSD_Addr = 0xE71a93D5089db5F115DBd9644CA8538A69813362;\\r\\n    address public USDT_Addr = 0xB3e08b8bf27D7325D31fb520d0dF786074a128E6;\\r\\n    address public USDC_Addr = 0x632c9b56D8187eeeEDdA3dC1BC241245D5d0A7F5;\\r\\n    // address private priceAddress = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE; // BNB/USD Mainnet\\r\\n    address private priceAddress = 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526; // BNB/USD Testnet\\r\\n\\r\\n    //ICO Details\\r\\n    uint public tokenPrice = 50;\\r\\n    uint public hardCap = 20000000;\\r\\n    uint public raisedAmount;\\r\\n    // uint public bnbprice = 25564418385;\\r\\n\\r\\n    //Investor\\r\\n    mapping(address => uint) public investedAmountOf;\\r\\n\\r\\n    //ICO State\\r\\n    enum State {\\r\\n        BEFORE,\\r\\n        RUNNING,\\r\\n        END,\\r\\n        HALTED\\r\\n    }\\r\\n    State public ICOState;\\r\\n\\r\\n    //Events\\r\\n    event Invest(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint value,\\r\\n        uint tokens\\r\\n    );\\r\\n\\r\\n    event BoughtTokens(address indexed to, uint256 value);\\r\\n    \\r\\n    event TokenBurn(address to, uint amount, uint time);\\r\\n\\r\\n    //Initialize Variables\\r\\n    constructor(address _token) {\\r\\n        admin = msg.sender;\\r\\n        token = WSYRF(_token);\\r\\n        BUSD = IBEP20(BUSD_Addr);\\r\\n        USDT = IBEP20(USDT_Addr);\\r\\n        USDC = IBEP20(USDC_Addr);\\r\\n        priceFeed = AggregatorV3Interface(\\r\\n            priceAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //Access Control\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Admin Only function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //Receive Ether Directly\\r\\n    receive() external payable {\\r\\n        invest();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        invest();\\r\\n    }\\r\\n\\r\\n    /* Functions */\\r\\n\\r\\n    //Get ICO State\\r\\n    function getICOState() external view returns (string memory) {\\r\\n        if (ICOState == State.BEFORE) {\\r\\n            return \\\"Not Started\\\";\\r\\n        } else if (ICOState == State.RUNNING) {\\r\\n            return \\\"Running\\\";\\r\\n        } else if (ICOState == State.END) {\\r\\n            return \\\"End\\\";\\r\\n        } else {\\r\\n            return \\\"Halted\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* Admin Functions */\\r\\n\\r\\n    //Start, Halt and End ICO\\r\\n    function startICO() external onlyAdmin {\\r\\n        require(ICOState == State.BEFORE, \\\"ICO isn't in before state\\\");\\r\\n        ICOState = State.RUNNING;\\r\\n    }\\r\\n\\r\\n    function haltICO() external onlyAdmin {\\r\\n        require(ICOState == State.RUNNING, \\\"ICO isn't running yet\\\");\\r\\n        ICOState = State.HALTED;\\r\\n    }\\r\\n\\r\\n    function resumeICO() external onlyAdmin {\\r\\n        require(ICOState == State.HALTED, \\\"ICO State isn't halted yet\\\");\\r\\n        ICOState = State.RUNNING;\\r\\n    }\\r\\n\\r\\n    function endICO() external onlyAdmin {\\r\\n        require(ICOState == State.RUNNING, \\\"ICO State isn't running yet\\\");\\r\\n        ICOState = State.END;\\r\\n    }\\r\\n\\r\\n    //Change tokenprice\\r\\n    function changeTokenPrice(uint _tokenPrice) external onlyAdmin {\\r\\n        tokenPrice = _tokenPrice;\\r\\n    }\\r\\n\\r\\n    //Change amount of token sale\\r\\n    function changeHardCap(uint _hardCap) external onlyAdmin {\\r\\n        hardCap = _hardCap;\\r\\n    }\\r\\n\\r\\n    //Burn Tokens\\r\\n    function burn() external onlyAdmin returns (bool)  {\\r\\n        require(ICOState == State.END, \\\"ICO isn't over yet\\\");\\r\\n\\r\\n        uint remainingTokens = token.balanceOf(address(this));\\r\\n        bool success = token.transfer(address(0), remainingTokens);\\r\\n        require(success, \\\"Failed to burn remaining tokens\\\");\\r\\n\\r\\n        emit TokenBurn(address(0), remainingTokens, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //WithdrawBNB\\r\\n    function withdrawBNB() public onlyAdmin {\\r\\n        uint256 balance = address(this).balance;\\r\\n        payable(msg.sender).transfer(balance);\\r\\n    }\\r\\n\\r\\n    //WithdrawToken\\r\\n    function withdrawToken(address _tokenAddr) public onlyAdmin {\\r\\n        require(IBEP20(_tokenAddr).balanceOf(address(this)) > 0, \\\"Sufficient Token balance\\\");\\r\\n        \\r\\n        IBEP20(_tokenAddr).transfer(msg.sender, IBEP20(_tokenAddr).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    /* User Function */\\r\\n    \\r\\n    //Invest\\r\\n    function invest() public payable returns (bool) {\\r\\n        require(ICOState == State.RUNNING, \\\"ICO isn't running\\\");\\r\\n        require(raisedAmount.add((msg.value.mul(getLatestPrice())).div(tokenPrice.mul(1e6))) <= hardCap.mul(10**18), \\\"Send within hardcap range\\\");\\r\\n\\r\\n        uint tokens = ((msg.value.mul(getLatestPrice())).div(tokenPrice.mul(1e6)));\\r\\n\\r\\n        investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(tokens);\\r\\n\\r\\n        raisedAmount = raisedAmount.add(tokens);\\r\\n\\r\\n        bool saleSuccess = token.transfer(msg.sender, tokens);\\r\\n        require(saleSuccess, \\\"Failed to Invest\\\");\\r\\n\\r\\n        emit Invest(address(this), msg.sender, msg.value, tokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //Buy SYRF with other tokens\\r\\n    function buyWithTokens(uint token_amount, address _tokenAddr) public returns (bool) {\\r\\n        require(ICOState == State.RUNNING, \\\"ICO isn't running\\\");\\r\\n        require(token_amount > 0, \\\"Amount can't be zero numbers\\\");\\r\\n        require(raisedAmount.add(token_amount.mul(10**2).div(tokenPrice)) <= hardCap.mul(10**18), \\\"Send within hardcap range\\\");\\r\\n\\r\\n        uint tokens = token_amount.mul(1e2).div(tokenPrice);\\r\\n\\r\\n        if(_tokenAddr == BUSD_Addr) {\\r\\n            BUSD.transferFrom(msg.sender, address(this), token_amount); // Bring ICO contract address BUSD tokens from buyer\\r\\n        } else if(_tokenAddr == USDT_Addr) {\\r\\n            USDT.transferFrom(msg.sender, address(this), token_amount); // Bring ICO contract address USDT tokens from buyer\\r\\n        } else if(_tokenAddr == USDC_Addr) {\\r\\n            USDC.transferFrom(msg.sender, address(this), token_amount); // Bring ICO contract address USDC tokens from buyer\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(tokens);\\r\\n        raisedAmount = raisedAmount.add(tokens);\\r\\n        token.transfer(msg.sender, tokens); // Send WSYRF tokens to buyer\\r\\n\\r\\n        emit BoughtTokens(msg.sender, tokens); // log event onto the blockchain\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //Check ICO Contract Token Balance\\r\\n    function getICOTokenBalance() external view returns (uint) {\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    //Check ICO Contract Investor Token Balance\\r\\n    function investorBalanceOf(address _investor) external view returns (uint) {\\r\\n        return token.balanceOf(_investor);\\r\\n    }\\r\\n\\r\\n    function getLatestPrice() public view returns (uint) {\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return (uint)(price);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x76892f6e291788d574d4311ab3ba68b1e5859a86b1c87686b321e029d9d80d57\",\"license\":\"MIT\"},\"contracts/WSYRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ncontract WSYRF is IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping (address => uint256)) private _allowances;\\r\\n    mapping(address => bool) public blacklistedUsers;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    uint8 private _decimals;\\r\\n    string private _symbol;\\r\\n    string private _name;\\r\\n\\r\\n    address[] public airdropAddress;\\r\\n    uint256[] public airdropAmount;\\r\\n    bool public transferApproval = true;\\r\\n\\r\\n    constructor() {\\r\\n        _name = \\\"Wrapped SYRF Coin\\\";\\r\\n        _symbol = \\\"WSYRF\\\";\\r\\n        _decimals = 18;\\r\\n        _totalSupply = 2e28;\\r\\n        _balances[_msgSender()] = _totalSupply;\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the erc token owner.\\r\\n    */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the token decimals.\\r\\n    */\\r\\n    function decimals() external view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the token symbol.\\r\\n    */\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the token name.\\r\\n    */\\r\\n    function name() external view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {ERC20-totalSupply}.\\r\\n    */\\r\\n    function totalSupply() external override view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {ERC20-balanceOf}.\\r\\n    */\\r\\n    function balanceOf(address account) external override view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {ERC20-transfer}.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `recipient` cannot be the zero address.\\r\\n    * - the caller must have a balance of at least `amount`.\\r\\n    */\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        require(!blacklistedUsers[_msgSender()], \\\"You are a blacklisted user\\\");\\r\\n        require(transferApproval, \\\"Can't transfer WSYRF tokens\\\");\\r\\n\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {ERC20-allowance}.\\r\\n    */\\r\\n    function allowance(address owner, address spender) external override view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {ERC20-approve}.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `spender` cannot be the zero address.\\r\\n    */\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {ERC20-transferFrom}.\\r\\n    *\\r\\n    * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n    * required by the EIP. See the note at the beginning of {ERC20};\\r\\n    *\\r\\n    * Requirements:\\r\\n    * - `sender` and `recipient` cannot be the zero address.\\r\\n    * - `sender` must have a balance of at least `amount`.\\r\\n    * - the caller must have allowance for `sender`'s tokens of at least\\r\\n    * `amount`.\\r\\n    */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        require(!blacklistedUsers[_msgSender()], \\\"You are a blacklisted user\\\");\\r\\n        require(transferApproval, \\\"Can't transfer WSYRF tokens\\\");\\r\\n\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n    *\\r\\n    * This is an alternative to {approve} that can be used as a mitigation for\\r\\n    * problems described in {ERC20-approve}.\\r\\n    *\\r\\n    * Emits an {Approval} event indicating the updated allowance.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `spender` cannot be the zero address.\\r\\n    */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n    *\\r\\n    * This is an alternative to {approve} that can be used as a mitigation for\\r\\n    * problems described in {ERC20-approve}.\\r\\n    *\\r\\n    * Emits an {Approval} event indicating the updated allowance.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `spender` cannot be the zero address.\\r\\n    * - `spender` must have allowance for the caller of at least\\r\\n    * `subtractedValue`.\\r\\n    */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Creates `amount` tokens and assigns them to `_msgSender()`, increasing\\r\\n    * the total supply.\\r\\n    *\\r\\n    * Requirements\\r\\n    *\\r\\n    * - `_msgSender()` must be the token owner\\r\\n    */\\r\\n    function mint(address account, uint256 amount) public returns (bool) {\\r\\n        _mint(account, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Destroys `amount` tokens and assigns them to `_msgSender()`, reducing\\r\\n    * the total supply.\\r\\n    *\\r\\n    * Requirements\\r\\n    *\\r\\n    * - `_msgSender()` must be the token owner\\r\\n    */\\r\\n    function burn(uint256 amount) public returns (bool) {\\r\\n        _burn(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n    *\\r\\n    * This is internal function is equivalent to {transfer}, and can be used to\\r\\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n    *\\r\\n    * Emits a {Transfer} event.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `sender` cannot be the zero address.\\r\\n    * - `recipient` cannot be the zero address.\\r\\n    * - `sender` must have a balance of at least `amount`.\\r\\n    */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n    * the total supply.\\r\\n    *\\r\\n    * Emits a {Transfer} event with `from` set to the zero address.\\r\\n    *\\r\\n    * Requirements\\r\\n    *\\r\\n    * - `to` cannot be the zero address.\\r\\n    */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n    * total supply.\\r\\n    *\\r\\n    * Emits a {Transfer} event with `to` set to the zero address.\\r\\n    *\\r\\n    * Requirements\\r\\n    *\\r\\n    * - `account` cannot be the zero address.\\r\\n    * - `account` must have at least `amount` tokens.\\r\\n    */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n    *\\r\\n    * This is internal function is equivalent to `approve`, and can be used to\\r\\n    * e.g. set automatic allowances for certain subsystems, etc.\\r\\n    *\\r\\n    * Emits an {Approval} event.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `owner` cannot be the zero address.\\r\\n    * - `spender` cannot be the zero address.\\r\\n    */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n    * from the caller's allowance.\\r\\n    *\\r\\n    * See {_burn} and {_approve}.\\r\\n    */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * setBlacklisted\\r\\n    * @dev function that sets blacklisted address\\r\\n    **/\\r\\n    function setBlacklisted(address _addr, bool _value) external onlyOwner {\\r\\n        require(blacklistedUsers[_addr] != _value, \\\"Not changed\\\");\\r\\n        blacklistedUsers[_addr] = _value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * setTransferApproval\\r\\n    * @dev function that sets transfer approval status\\r\\n    **/\\r\\n    function setTransferApproval(bool _value) external onlyOwner {\\r\\n        require(transferApproval != _value, \\\"Not changed\\\");\\r\\n        transferApproval = _value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * setAirdropAddress\\r\\n    * @dev function that sets airdrop address array\\r\\n    **/\\r\\n    function setAirdropAddress(address[] memory _airdropAddress) external onlyOwner {\\r\\n        airdropAddress = _airdropAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * setAirdropAmount\\r\\n    * @dev function that sets airdrop amount array\\r\\n    **/\\r\\n    function setAirdropAmount(uint256[] memory _airdropAmount) external onlyOwner {\\r\\n        airdropAmount = _airdropAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * airdrop\\r\\n    * @dev function that airdrops WSYRF tokens to airdrop addresses\\r\\n    **/\\r\\n    function airdrop(address tokenAddress) external onlyOwner {\\r\\n        for(uint256 i = 0; i < airdropAddress.length ; i ++) {\\r\\n            IERC20(tokenAddress).transfer(airdropAddress[i], airdropAmount[i]);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x841a9ba8743e90ac70e7a98f5c8c18344b4a27745bc6102ab8866d061fa770da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600680546001600160a01b031990811673e71a93d5089db5f115dbd9644ca8538a698133621790915560078054821673b3e08b8bf27d7325d31fb520d0df786074a128e617905560088054821673632c9b56d8187eeeedda3dc1bc241245d5d0a7f517905560098054909116732514895c72f50d8bd4b4f9b1110f0d6bd2c975261790556032600a556301312d00600b553480156100a157600080fd5b506040516119a53803806119a58339810160408190526100c091610137565b600180546001600160a01b03199081163317909155600280546001600160a01b03938416908316179055600654600380548316918416919091179055600754600480548316918416919091179055600854600580548316918416919091179055600954600080549092169216919091179055610167565b60006020828403121561014957600080fd5b81516001600160a01b038116811461016057600080fd5b9392505050565b61182f806101766000396000f3fe60806040526004361061019a5760003560e01c80637fa8c158116100e1578063c59ee1dc1161008a578063f978a2c011610064578063f978a2c01461041e578063fb86a4041461043e578063fbc94f2414610454578063fc0c546a14610474576101a9565b8063c59ee1dc146103e0578063e8b5e51f146103f6578063f851a440146103fe576101a9565b80638e15f473116100bb5780638e15f4731461038f5780639cbd7da5146103a4578063aeecdc2c146103b9576101a9565b80637fa8c158146103445780637ff9b59614610359578063894760691461036f576101a9565b80632ac11b4f116101435780634f2484091161011d5780634f248409146102fa5780636127b2ca1461030f57806361fba37d14610324576101a9565b80632ac11b4f146102a35780632e659d93146102c357806344df8e70146102e5576101a9565b80631aae3460116101745780631aae3460146102335780631d111d131461026e57806324f32f8214610283576101a9565b80630139ddff146101b1578063129caa18146101e657806312ab1cba146101fb576101a9565b366101a9576101a7610494565b005b6101a7610494565b3480156101bd57600080fd5b506101d16101cc3660046115fe565b610708565b60405190151581526020015b60405180910390f35b3480156101f257600080fd5b506101a7610a8b565b34801561020757600080fd5b5060085461021b906001600160a01b031681565b6040516001600160a01b0390911681526020016101dd565b34801561023f57600080fd5b5061026061024e36600461162a565b600d6020526000908152604090205481565b6040519081526020016101dd565b34801561027a57600080fd5b506101a7610b58565b34801561028f57600080fd5b506101a761029e366004611645565b610bdb565b3480156102af57600080fd5b5060075461021b906001600160a01b031681565b3480156102cf57600080fd5b506102d8610c30565b6040516101dd919061165e565b3480156102f157600080fd5b506101d1610d6c565b34801561030657600080fd5b506101a7610fa5565b34801561031b57600080fd5b5061026061106f565b34801561033057600080fd5b5061026061033f36600461162a565b6110e1565b34801561035057600080fd5b506101a7611150565b34801561036557600080fd5b50610260600a5481565b34801561037b57600080fd5b506101a761038a36600461162a565b611219565b34801561039b57600080fd5b5061026061141a565b3480156103b057600080fd5b506101a76114ac565b3480156103c557600080fd5b50600e546103d39060ff1681565b6040516101dd91906116c2565b3480156103ec57600080fd5b50610260600c5481565b6101d1610494565b34801561040a57600080fd5b5060015461021b906001600160a01b031681565b34801561042a57600080fd5b5060065461021b906001600160a01b031681565b34801561044a57600080fd5b50610260600b5481565b34801561046057600080fd5b506101a761046f366004611645565b611562565b34801561048057600080fd5b5060025461021b906001600160a01b031681565b60006001600e5460ff1660038111156104af576104af6116ac565b146105015760405162461bcd60e51b815260206004820152601160248201527f49434f2069736e27742072756e6e696e6700000000000000000000000000000060448201526064015b60405180910390fd5b600b5461051690670de0b6b3a76400006115b7565b61055561054c610534620f4240600a546115b790919063ffffffff16565b61054661053f61141a565b34906115b7565b906115ca565b600c54906115d6565b11156105a35760405162461bcd60e51b815260206004820152601960248201527f53656e642077697468696e20686172646361702072616e67650000000000000060448201526064016104f8565b60006105c0610534620f4240600a546115b790919063ffffffff16565b336000908152600d60205260409020549091506105dd90826115d6565b336000908152600d6020526040902055600c546105fa90826115d6565b600c5560025460405163a9059cbb60e01b8152336004820152602481018390526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561064f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067391906116ea565b9050806106c25760405162461bcd60e51b815260206004820152601060248201527f4661696c656420746f20496e766573740000000000000000000000000000000060448201526064016104f8565b6040805134815260208101849052339130917f2e206bbdd5787cd6d3e97144dec044f9f15dd77a257afd27fa70cad6f03feae3910160405180910390a360019250505090565b60006001600e5460ff166003811115610723576107236116ac565b146107705760405162461bcd60e51b815260206004820152601160248201527f49434f2069736e27742072756e6e696e6700000000000000000000000000000060448201526064016104f8565b600083116107c05760405162461bcd60e51b815260206004820152601c60248201527f416d6f756e742063616e2774206265207a65726f206e756d626572730000000060448201526064016104f8565b600b546107d590670de0b6b3a76400006115b7565b600a546107eb9061054c906105468760646115b7565b11156108395760405162461bcd60e51b815260206004820152601960248201527f53656e642077697468696e20686172646361702072616e67650000000000000060448201526064016104f8565b600a5460009061084e906105468660646115b7565b6006549091506001600160a01b03908116908416036108e9576003546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064015b6020604051808303816000875af11580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e391906116ea565b5061099a565b6007546001600160a01b039081169084160361093d57600480546040516323b872dd60e01b81523392810192909252306024830152604482018690526001600160a01b0316906323b872dd906064016108a0565b6008546001600160a01b0390811690841603610990576005546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016108a0565b6000915050610a85565b336000908152600d60205260409020546109b490826115d6565b336000908152600d6020526040902055600c546109d190826115d6565b600c5560025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4991906116ea565b5060405181815233907f61b2357f75eed32a19939598e4c7563879bacd78e9d957c31f0f9f70a3fd14a09060200160405180910390a260019150505b92915050565b6001546001600160a01b03163314610adb5760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6001600e5460ff166003811115610af457610af46116ac565b14610b415760405162461bcd60e51b815260206004820152601560248201527f49434f2069736e27742072756e6e696e6720796574000000000000000000000060448201526064016104f8565b600e80546003919060ff19166001835b0217905550565b6001546001600160a01b03163314610ba85760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6040514790339082156108fc029083906000818181858888f19350505050158015610bd7573d6000803e3d6000fd5b5050565b6001546001600160a01b03163314610c2b5760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b600b55565b60606000600e5460ff166003811115610c4b57610c4b6116ac565b03610c88575060408051808201909152600b81527f4e6f742053746172746564000000000000000000000000000000000000000000602082015290565b6001600e5460ff166003811115610ca157610ca16116ac565b03610cde575060408051808201909152600781527f52756e6e696e6700000000000000000000000000000000000000000000000000602082015290565b6002600e5460ff166003811115610cf757610cf76116ac565b03610d34575060408051808201909152600381527f456e640000000000000000000000000000000000000000000000000000000000602082015290565b5060408051808201909152600681527f48616c7465640000000000000000000000000000000000000000000000000000602082015290565b6001546000906001600160a01b03163314610dbf5760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6002600e5460ff166003811115610dd857610dd86116ac565b14610e255760405162461bcd60e51b815260206004820152601260248201527f49434f2069736e2774206f76657220796574000000000000000000000000000060448201526064016104f8565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e92919061170c565b60025460405163a9059cbb60e01b8152600060048201819052602482018490529293506001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0d91906116ea565b905080610f5c5760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f206275726e2072656d61696e696e6720746f6b656e730060448201526064016104f8565b604080516000815260208101849052428183015290517ffe9e0b0c1e3e9216717d5f66d10bc310b12c366417e150b4b1af9fb9620bca919181900360600190a160019250505090565b6001546001600160a01b03163314610ff55760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6001600e5460ff16600381111561100e5761100e6116ac565b1461105b5760405162461bcd60e51b815260206004820152601b60248201527f49434f2053746174652069736e27742072756e6e696e6720796574000000000060448201526064016104f8565b600e80546002919060ff1916600183610b51565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc919061170c565b905090565b6002546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a85919061170c565b6001546001600160a01b031633146111a05760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6000600e5460ff1660038111156111b9576111b96116ac565b146112065760405162461bcd60e51b815260206004820152601960248201527f49434f2069736e277420696e206265666f72652073746174650000000000000060448201526064016104f8565b600e80546001919060ff19168280610b51565b6001546001600160a01b031633146112695760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156112b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d4919061170c565b116113215760405162461bcd60e51b815260206004820152601860248201527f53756666696369656e7420546f6b656e2062616c616e6365000000000000000060448201526064016104f8565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611393919061170c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd791906116ea565b60008054604080517ffeaf968c000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a1919061173f565b509195945050505050565b6001546001600160a01b031633146114fc5760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6003600e5460ff166003811115611515576115156116ac565b146112065760405162461bcd60e51b815260206004820152601a60248201527f49434f2053746174652069736e27742068616c7465642079657400000000000060448201526064016104f8565b6001546001600160a01b031633146115b25760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b600a55565b60006115c382846117a5565b9392505050565b60006115c382846117c4565b60006115c382846117e6565b80356001600160a01b03811681146115f957600080fd5b919050565b6000806040838503121561161157600080fd5b82359150611621602084016115e2565b90509250929050565b60006020828403121561163c57600080fd5b6115c3826115e2565b60006020828403121561165757600080fd5b5035919050565b600060208083528351808285015260005b8181101561168b5785810183015185820160400152820161166f565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052602160045260246000fd5b60208101600483106116e457634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156116fc57600080fd5b815180151581146115c357600080fd5b60006020828403121561171e57600080fd5b5051919050565b805169ffffffffffffffffffff811681146115f957600080fd5b600080600080600060a0868803121561175757600080fd5b61176086611725565b945060208601519350604086015192506060860151915061178360808701611725565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156117bf576117bf61178f565b500290565b6000826117e157634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610a8557610a8561178f56fea2646970667358221220613498e173ff77c8df4319622cca29215915c5a1a14b3d9f32b51ad5033af8fe64736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061019a5760003560e01c80637fa8c158116100e1578063c59ee1dc1161008a578063f978a2c011610064578063f978a2c01461041e578063fb86a4041461043e578063fbc94f2414610454578063fc0c546a14610474576101a9565b8063c59ee1dc146103e0578063e8b5e51f146103f6578063f851a440146103fe576101a9565b80638e15f473116100bb5780638e15f4731461038f5780639cbd7da5146103a4578063aeecdc2c146103b9576101a9565b80637fa8c158146103445780637ff9b59614610359578063894760691461036f576101a9565b80632ac11b4f116101435780634f2484091161011d5780634f248409146102fa5780636127b2ca1461030f57806361fba37d14610324576101a9565b80632ac11b4f146102a35780632e659d93146102c357806344df8e70146102e5576101a9565b80631aae3460116101745780631aae3460146102335780631d111d131461026e57806324f32f8214610283576101a9565b80630139ddff146101b1578063129caa18146101e657806312ab1cba146101fb576101a9565b366101a9576101a7610494565b005b6101a7610494565b3480156101bd57600080fd5b506101d16101cc3660046115fe565b610708565b60405190151581526020015b60405180910390f35b3480156101f257600080fd5b506101a7610a8b565b34801561020757600080fd5b5060085461021b906001600160a01b031681565b6040516001600160a01b0390911681526020016101dd565b34801561023f57600080fd5b5061026061024e36600461162a565b600d6020526000908152604090205481565b6040519081526020016101dd565b34801561027a57600080fd5b506101a7610b58565b34801561028f57600080fd5b506101a761029e366004611645565b610bdb565b3480156102af57600080fd5b5060075461021b906001600160a01b031681565b3480156102cf57600080fd5b506102d8610c30565b6040516101dd919061165e565b3480156102f157600080fd5b506101d1610d6c565b34801561030657600080fd5b506101a7610fa5565b34801561031b57600080fd5b5061026061106f565b34801561033057600080fd5b5061026061033f36600461162a565b6110e1565b34801561035057600080fd5b506101a7611150565b34801561036557600080fd5b50610260600a5481565b34801561037b57600080fd5b506101a761038a36600461162a565b611219565b34801561039b57600080fd5b5061026061141a565b3480156103b057600080fd5b506101a76114ac565b3480156103c557600080fd5b50600e546103d39060ff1681565b6040516101dd91906116c2565b3480156103ec57600080fd5b50610260600c5481565b6101d1610494565b34801561040a57600080fd5b5060015461021b906001600160a01b031681565b34801561042a57600080fd5b5060065461021b906001600160a01b031681565b34801561044a57600080fd5b50610260600b5481565b34801561046057600080fd5b506101a761046f366004611645565b611562565b34801561048057600080fd5b5060025461021b906001600160a01b031681565b60006001600e5460ff1660038111156104af576104af6116ac565b146105015760405162461bcd60e51b815260206004820152601160248201527f49434f2069736e27742072756e6e696e6700000000000000000000000000000060448201526064015b60405180910390fd5b600b5461051690670de0b6b3a76400006115b7565b61055561054c610534620f4240600a546115b790919063ffffffff16565b61054661053f61141a565b34906115b7565b906115ca565b600c54906115d6565b11156105a35760405162461bcd60e51b815260206004820152601960248201527f53656e642077697468696e20686172646361702072616e67650000000000000060448201526064016104f8565b60006105c0610534620f4240600a546115b790919063ffffffff16565b336000908152600d60205260409020549091506105dd90826115d6565b336000908152600d6020526040902055600c546105fa90826115d6565b600c5560025460405163a9059cbb60e01b8152336004820152602481018390526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561064f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067391906116ea565b9050806106c25760405162461bcd60e51b815260206004820152601060248201527f4661696c656420746f20496e766573740000000000000000000000000000000060448201526064016104f8565b6040805134815260208101849052339130917f2e206bbdd5787cd6d3e97144dec044f9f15dd77a257afd27fa70cad6f03feae3910160405180910390a360019250505090565b60006001600e5460ff166003811115610723576107236116ac565b146107705760405162461bcd60e51b815260206004820152601160248201527f49434f2069736e27742072756e6e696e6700000000000000000000000000000060448201526064016104f8565b600083116107c05760405162461bcd60e51b815260206004820152601c60248201527f416d6f756e742063616e2774206265207a65726f206e756d626572730000000060448201526064016104f8565b600b546107d590670de0b6b3a76400006115b7565b600a546107eb9061054c906105468760646115b7565b11156108395760405162461bcd60e51b815260206004820152601960248201527f53656e642077697468696e20686172646361702072616e67650000000000000060448201526064016104f8565b600a5460009061084e906105468660646115b7565b6006549091506001600160a01b03908116908416036108e9576003546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064015b6020604051808303816000875af11580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e391906116ea565b5061099a565b6007546001600160a01b039081169084160361093d57600480546040516323b872dd60e01b81523392810192909252306024830152604482018690526001600160a01b0316906323b872dd906064016108a0565b6008546001600160a01b0390811690841603610990576005546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016108a0565b6000915050610a85565b336000908152600d60205260409020546109b490826115d6565b336000908152600d6020526040902055600c546109d190826115d6565b600c5560025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4991906116ea565b5060405181815233907f61b2357f75eed32a19939598e4c7563879bacd78e9d957c31f0f9f70a3fd14a09060200160405180910390a260019150505b92915050565b6001546001600160a01b03163314610adb5760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6001600e5460ff166003811115610af457610af46116ac565b14610b415760405162461bcd60e51b815260206004820152601560248201527f49434f2069736e27742072756e6e696e6720796574000000000000000000000060448201526064016104f8565b600e80546003919060ff19166001835b0217905550565b6001546001600160a01b03163314610ba85760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6040514790339082156108fc029083906000818181858888f19350505050158015610bd7573d6000803e3d6000fd5b5050565b6001546001600160a01b03163314610c2b5760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b600b55565b60606000600e5460ff166003811115610c4b57610c4b6116ac565b03610c88575060408051808201909152600b81527f4e6f742053746172746564000000000000000000000000000000000000000000602082015290565b6001600e5460ff166003811115610ca157610ca16116ac565b03610cde575060408051808201909152600781527f52756e6e696e6700000000000000000000000000000000000000000000000000602082015290565b6002600e5460ff166003811115610cf757610cf76116ac565b03610d34575060408051808201909152600381527f456e640000000000000000000000000000000000000000000000000000000000602082015290565b5060408051808201909152600681527f48616c7465640000000000000000000000000000000000000000000000000000602082015290565b6001546000906001600160a01b03163314610dbf5760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6002600e5460ff166003811115610dd857610dd86116ac565b14610e255760405162461bcd60e51b815260206004820152601260248201527f49434f2069736e2774206f76657220796574000000000000000000000000000060448201526064016104f8565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e92919061170c565b60025460405163a9059cbb60e01b8152600060048201819052602482018490529293506001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0d91906116ea565b905080610f5c5760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f206275726e2072656d61696e696e6720746f6b656e730060448201526064016104f8565b604080516000815260208101849052428183015290517ffe9e0b0c1e3e9216717d5f66d10bc310b12c366417e150b4b1af9fb9620bca919181900360600190a160019250505090565b6001546001600160a01b03163314610ff55760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6001600e5460ff16600381111561100e5761100e6116ac565b1461105b5760405162461bcd60e51b815260206004820152601b60248201527f49434f2053746174652069736e27742072756e6e696e6720796574000000000060448201526064016104f8565b600e80546002919060ff1916600183610b51565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc919061170c565b905090565b6002546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a85919061170c565b6001546001600160a01b031633146111a05760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6000600e5460ff1660038111156111b9576111b96116ac565b146112065760405162461bcd60e51b815260206004820152601960248201527f49434f2069736e277420696e206265666f72652073746174650000000000000060448201526064016104f8565b600e80546001919060ff19168280610b51565b6001546001600160a01b031633146112695760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156112b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d4919061170c565b116113215760405162461bcd60e51b815260206004820152601860248201527f53756666696369656e7420546f6b656e2062616c616e6365000000000000000060448201526064016104f8565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611393919061170c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd791906116ea565b60008054604080517ffeaf968c000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a1919061173f565b509195945050505050565b6001546001600160a01b031633146114fc5760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b6003600e5460ff166003811115611515576115156116ac565b146112065760405162461bcd60e51b815260206004820152601a60248201527f49434f2053746174652069736e27742068616c7465642079657400000000000060448201526064016104f8565b6001546001600160a01b031633146115b25760405162461bcd60e51b815260206004820152601360248201527220b236b4b71027b7363c90333ab731ba34b7b760691b60448201526064016104f8565b600a55565b60006115c382846117a5565b9392505050565b60006115c382846117c4565b60006115c382846117e6565b80356001600160a01b03811681146115f957600080fd5b919050565b6000806040838503121561161157600080fd5b82359150611621602084016115e2565b90509250929050565b60006020828403121561163c57600080fd5b6115c3826115e2565b60006020828403121561165757600080fd5b5035919050565b600060208083528351808285015260005b8181101561168b5785810183015185820160400152820161166f565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052602160045260246000fd5b60208101600483106116e457634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156116fc57600080fd5b815180151581146115c357600080fd5b60006020828403121561171e57600080fd5b5051919050565b805169ffffffffffffffffffff811681146115f957600080fd5b600080600080600060a0868803121561175757600080fd5b61176086611725565b945060208601519350604086015192506060860151915061178360808701611725565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156117bf576117bf61178f565b500290565b6000826117e157634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610a8557610a8561178f56fea2646970667358221220613498e173ff77c8df4319622cca29215915c5a1a14b3d9f32b51ad5033af8fe64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 612,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 614,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 617,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(WSYRF)1995"
      },
      {
        "astId": 620,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "BUSD",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IBEP20)606"
      },
      {
        "astId": 623,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "USDT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBEP20)606"
      },
      {
        "astId": 626,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "USDC",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBEP20)606"
      },
      {
        "astId": 629,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "BUSD_Addr",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 632,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "USDT_Addr",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 635,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "USDC_Addr",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 638,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "priceAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 641,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "tokenPrice",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 644,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "hardCap",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 646,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "raisedAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 650,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "investedAmountOf",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 658,
        "contract": "contracts/SYRFICO.sol:SYRFICO",
        "label": "ICOState",
        "offset": 0,
        "slot": "14",
        "type": "t_enum(State)655"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IBEP20)606": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_contract(WSYRF)1995": {
        "encoding": "inplace",
        "label": "contract WSYRF",
        "numberOfBytes": "20"
      },
      "t_enum(State)655": {
        "encoding": "inplace",
        "label": "enum SYRFICO.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}