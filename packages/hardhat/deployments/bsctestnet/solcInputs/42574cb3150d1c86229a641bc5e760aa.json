{
  "language": "Solidity",
  "sources": {
    "contracts/SYRFICO.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.16;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./WSYRF.sol\";\r\n\r\ninterface IBEP20 {\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract SYRFICO {\r\n    using SafeMath for uint256;\r\n    AggregatorV3Interface internal priceFeed;\r\n    //Administration Details\r\n    address public admin;\r\n\r\n    //Token\r\n    WSYRF public token;\r\n    IBEP20 BUSD;\r\n    IBEP20 USDT;\r\n    IBEP20 USDC;\r\n    address public BUSD_Addr = 0xE71a93D5089db5F115DBd9644CA8538A69813362;\r\n    address public USDT_Addr = 0xB3e08b8bf27D7325D31fb520d0dF786074a128E6;\r\n    address public USDC_Addr = 0x632c9b56D8187eeeEDdA3dC1BC241245D5d0A7F5;\r\n    // address private priceAddress = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE; // BNB/USD Mainnet\r\n    address private priceAddress = 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526; // BNB/USD Testnet\r\n\r\n    //ICO Details\r\n    uint public tokenPrice = 50;\r\n    uint public hardCap = 20000000;\r\n    uint public raisedAmount;\r\n    // uint public bnbprice = 25564418385;\r\n\r\n    //Investor\r\n    mapping(address => uint) public investedAmountOf;\r\n\r\n    //ICO State\r\n    enum State {\r\n        BEFORE,\r\n        RUNNING,\r\n        END,\r\n        HALTED\r\n    }\r\n    State public ICOState;\r\n\r\n    //Events\r\n    event Invest(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint value,\r\n        uint tokens\r\n    );\r\n\r\n    event BoughtTokens(address indexed to, uint256 value);\r\n    \r\n    event TokenBurn(address to, uint amount, uint time);\r\n\r\n    //Initialize Variables\r\n    constructor(address _token) {\r\n        admin = msg.sender;\r\n        token = WSYRF(_token);\r\n        BUSD = IBEP20(BUSD_Addr);\r\n        USDT = IBEP20(USDT_Addr);\r\n        USDC = IBEP20(USDC_Addr);\r\n        priceFeed = AggregatorV3Interface(\r\n            priceAddress\r\n        );\r\n    }\r\n\r\n    //Access Control\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Admin Only function\");\r\n        _;\r\n    }\r\n\r\n    //Receive Ether Directly\r\n    receive() external payable {\r\n        invest();\r\n    }\r\n\r\n    fallback() external payable {\r\n        invest();\r\n    }\r\n\r\n    /* Functions */\r\n\r\n    //Get ICO State\r\n    function getICOState() external view returns (string memory) {\r\n        if (ICOState == State.BEFORE) {\r\n            return \"Not Started\";\r\n        } else if (ICOState == State.RUNNING) {\r\n            return \"Running\";\r\n        } else if (ICOState == State.END) {\r\n            return \"End\";\r\n        } else {\r\n            return \"Halted\";\r\n        }\r\n    }\r\n\r\n    /* Admin Functions */\r\n\r\n    //Start, Halt and End ICO\r\n    function startICO() external onlyAdmin {\r\n        require(ICOState == State.BEFORE, \"ICO isn't in before state\");\r\n        ICOState = State.RUNNING;\r\n    }\r\n\r\n    function haltICO() external onlyAdmin {\r\n        require(ICOState == State.RUNNING, \"ICO isn't running yet\");\r\n        ICOState = State.HALTED;\r\n    }\r\n\r\n    function resumeICO() external onlyAdmin {\r\n        require(ICOState == State.HALTED, \"ICO State isn't halted yet\");\r\n        ICOState = State.RUNNING;\r\n    }\r\n\r\n    function endICO() external onlyAdmin {\r\n        require(ICOState == State.RUNNING, \"ICO State isn't running yet\");\r\n        ICOState = State.END;\r\n    }\r\n\r\n    //Change tokenprice\r\n    function changeTokenPrice(uint _tokenPrice) external onlyAdmin {\r\n        tokenPrice = _tokenPrice;\r\n    }\r\n\r\n    //Change amount of token sale\r\n    function changeHardCap(uint _hardCap) external onlyAdmin {\r\n        hardCap = _hardCap;\r\n    }\r\n\r\n    //Burn Tokens\r\n    function burn() external onlyAdmin returns (bool)  {\r\n        require(ICOState == State.END, \"ICO isn't over yet\");\r\n\r\n        uint remainingTokens = token.balanceOf(address(this));\r\n        bool success = token.transfer(address(0), remainingTokens);\r\n        require(success, \"Failed to burn remaining tokens\");\r\n\r\n        emit TokenBurn(address(0), remainingTokens, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    //WithdrawBNB\r\n    function withdrawBNB() public onlyAdmin {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    //WithdrawToken\r\n    function withdrawToken(address _tokenAddr) public onlyAdmin {\r\n        require(IBEP20(_tokenAddr).balanceOf(address(this)) > 0, \"Sufficient Token balance\");\r\n        \r\n        IBEP20(_tokenAddr).transfer(msg.sender, IBEP20(_tokenAddr).balanceOf(address(this)));\r\n    }\r\n\r\n    /* User Function */\r\n    \r\n    //Invest\r\n    function invest() public payable returns (bool) {\r\n        require(ICOState == State.RUNNING, \"ICO isn't running\");\r\n        require(raisedAmount.add((msg.value.mul(getLatestPrice())).div(tokenPrice.mul(1e6))) <= hardCap.mul(10**18), \"Send within hardcap range\");\r\n\r\n        uint tokens = ((msg.value.mul(getLatestPrice())).div(tokenPrice.mul(1e6)));\r\n\r\n        investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(tokens);\r\n\r\n        raisedAmount = raisedAmount.add(tokens);\r\n\r\n        bool saleSuccess = token.transfer(msg.sender, tokens);\r\n        require(saleSuccess, \"Failed to Invest\");\r\n\r\n        emit Invest(address(this), msg.sender, msg.value, tokens);\r\n        return true;\r\n    }\r\n\r\n    //Buy SYRF with other tokens\r\n    function buyWithTokens(uint token_amount, address _tokenAddr) public returns (bool) {\r\n        require(ICOState == State.RUNNING, \"ICO isn't running\");\r\n        require(token_amount > 0, \"Amount can't be zero numbers\");\r\n        require(raisedAmount.add(token_amount.mul(10**2).div(tokenPrice)) <= hardCap.mul(10**18), \"Send within hardcap range\");\r\n\r\n        uint tokens = token_amount.mul(1e2).div(tokenPrice);\r\n\r\n        if(_tokenAddr == BUSD_Addr) {\r\n            BUSD.transferFrom(msg.sender, address(this), token_amount); // Bring ICO contract address BUSD tokens from buyer\r\n        } else if(_tokenAddr == USDT_Addr) {\r\n            USDT.transferFrom(msg.sender, address(this), token_amount); // Bring ICO contract address USDT tokens from buyer\r\n        } else if(_tokenAddr == USDC_Addr) {\r\n            USDC.transferFrom(msg.sender, address(this), token_amount); // Bring ICO contract address USDC tokens from buyer\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n        investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(tokens);\r\n        raisedAmount = raisedAmount.add(tokens);\r\n        token.transfer(msg.sender, tokens); // Send WSYRF tokens to buyer\r\n\r\n        emit BoughtTokens(msg.sender, tokens); // log event onto the blockchain\r\n\r\n        return true;\r\n    }\r\n\r\n    //Check ICO Contract Token Balance\r\n    function getICOTokenBalance() external view returns (uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    //Check ICO Contract Investor Token Balance\r\n    function investorBalanceOf(address _investor) external view returns (uint) {\r\n        return token.balanceOf(_investor);\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint) {\r\n        (\r\n            ,\r\n            /*uint80 roundID*/ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\r\n            ,\r\n            ,\r\n\r\n        ) = priceFeed.latestRoundData();\r\n        return (uint)(price);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/WSYRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\n\r\ncontract WSYRF is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping (address => uint256)) private _allowances;\r\n    mapping(address => bool) public blacklistedUsers;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n\r\n    address[] public airdropAddress;\r\n    uint256[] public airdropAmount;\r\n    bool public transferApproval = true;\r\n\r\n    constructor() {\r\n        _name = \"Wrapped SYRF Coin\";\r\n        _symbol = \"WSYRF\";\r\n        _decimals = 18;\r\n        _totalSupply = 2e28;\r\n        _balances[_msgSender()] = _totalSupply;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the erc token owner.\r\n    */\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token decimals.\r\n    */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token symbol.\r\n    */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n    * @dev See {ERC20-totalSupply}.\r\n    */\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev See {ERC20-balanceOf}.\r\n    */\r\n    function balanceOf(address account) external override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n    * @dev See {ERC20-transfer}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `recipient` cannot be the zero address.\r\n    * - the caller must have a balance of at least `amount`.\r\n    */\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(!blacklistedUsers[_msgSender()], \"You are a blacklisted user\");\r\n        require(transferApproval, \"Can't transfer WSYRF tokens\");\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev See {ERC20-allowance}.\r\n    */\r\n    function allowance(address owner, address spender) external override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev See {ERC20-approve}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev See {ERC20-transferFrom}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance. This is not\r\n    * required by the EIP. See the note at the beginning of {ERC20};\r\n    *\r\n    * Requirements:\r\n    * - `sender` and `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    * - the caller must have allowance for `sender`'s tokens of at least\r\n    * `amount`.\r\n    */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(!blacklistedUsers[_msgSender()], \"You are a blacklisted user\");\r\n        require(transferApproval, \"Can't transfer WSYRF tokens\");\r\n\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {ERC20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {ERC20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    * - `spender` must have allowance for the caller of at least\r\n    * `subtractedValue`.\r\n    */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Creates `amount` tokens and assigns them to `_msgSender()`, increasing\r\n    * the total supply.\r\n    *\r\n    * Requirements\r\n    *\r\n    * - `_msgSender()` must be the token owner\r\n    */\r\n    function mint(address account, uint256 amount) public returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys `amount` tokens and assigns them to `_msgSender()`, reducing\r\n    * the total supply.\r\n    *\r\n    * Requirements\r\n    *\r\n    * - `_msgSender()` must be the token owner\r\n    */\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n    *\r\n    * This is internal function is equivalent to {transfer}, and can be used to\r\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` cannot be the zero address.\r\n    * - `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n    * the total supply.\r\n    *\r\n    * Emits a {Transfer} event with `from` set to the zero address.\r\n    *\r\n    * Requirements\r\n    *\r\n    * - `to` cannot be the zero address.\r\n    */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    *\r\n    * Emits a {Transfer} event with `to` set to the zero address.\r\n    *\r\n    * Requirements\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    * - `account` must have at least `amount` tokens.\r\n    */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n    *\r\n    * This is internal function is equivalent to `approve`, and can be used to\r\n    * e.g. set automatic allowances for certain subsystems, etc.\r\n    *\r\n    * Emits an {Approval} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `owner` cannot be the zero address.\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n    * from the caller's allowance.\r\n    *\r\n    * See {_burn} and {_approve}.\r\n    */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n    \r\n    /**\r\n    * setBlacklisted\r\n    * @dev function that sets blacklisted address\r\n    **/\r\n    function setBlacklisted(address _addr, bool _value) external onlyOwner {\r\n        require(blacklistedUsers[_addr] != _value, \"Not changed\");\r\n        blacklistedUsers[_addr] = _value;\r\n    }\r\n\r\n    /**\r\n    * setTransferApproval\r\n    * @dev function that sets transfer approval status\r\n    **/\r\n    function setTransferApproval(bool _value) external onlyOwner {\r\n        require(transferApproval != _value, \"Not changed\");\r\n        transferApproval = _value;\r\n    }\r\n\r\n    /**\r\n    * setAirdropAddress\r\n    * @dev function that sets airdrop address array\r\n    **/\r\n    function setAirdropAddress(address[] memory _airdropAddress) external onlyOwner {\r\n        airdropAddress = _airdropAddress;\r\n    }\r\n\r\n    /**\r\n    * setAirdropAmount\r\n    * @dev function that sets airdrop amount array\r\n    **/\r\n    function setAirdropAmount(uint256[] memory _airdropAmount) external onlyOwner {\r\n        airdropAmount = _airdropAmount;\r\n    }\r\n\r\n    /**\r\n    * airdrop\r\n    * @dev function that airdrops WSYRF tokens to airdrop addresses\r\n    **/\r\n    function airdrop(address tokenAddress) external onlyOwner {\r\n        for(uint256 i = 0; i < airdropAddress.length ; i ++) {\r\n            IERC20(tokenAddress).transfer(airdropAddress[i], airdropAmount[i]);\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}